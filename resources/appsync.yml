name:  ${self:service}-console-${self:provider.stage}
authenticationType: AMAZON_COGNITO_USER_POOLS
# if AMAZON_COGNITO_USER_POOLS
userPoolConfig:
  defaultAction: ALLOW
  userPoolId: { Ref: CognitoUserPoolINeedPool }
  playgroundClientId: { Ref: CognitoUserPoolClient }

logConfig:
  loggingRoleArn: "redacted"
  level: ERROR # Logging Level: NONE | ERROR | ALL
mappingTemplatesLocation: src/graphql/mapping-templates
schema: src/graphql/schema.gql
dataSources:
  - type: NONE
    name: NoneDS

  - type: HTTP
    name: RocksetDS
    description: 'Rockset Endpoint'
    config:
      endpoint: 'https://api.rs2.usw2.rockset.com/'

  - type: AMAZON_DYNAMODB
    name: DynamoCompaniesTableDS
    description: 'DynamoDB Companies Table'
    config:
      tableName: { Ref: companiesTable } 
      iamRoleStatements: 
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.COMPANIES_TABLE}/index/*"
  - type: AMAZON_DYNAMODB
    name: DynamoBranchesTableDS
    description: 'DynamoDB Branches Table'
    config:
      tableName: { Ref: branchesTable } 
      iamRoleStatements: 
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BRANCHES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BRANCHES_TABLE}/index/*"
  - type: AMAZON_DYNAMODB
    name: DynamoCarsTableDS
    description: 'DynamoDB Cars Table'
    config:
      tableName: { Ref: carsTable } 
      iamRoleStatements: 
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CARS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CARS_TABLE}/index/*"
  - type: AMAZON_DYNAMODB
    name: DynamoEmployeesTableDS
    description: 'DynamoDB Employees Table'
    config:
      tableName: { Ref: employeesTable } 
      iamRoleStatements: 
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EMPLOYEES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.EMPLOYEES_TABLE}/index/*"
  - type: AMAZON_DYNAMODB
    name: DynamoCustomersTableDS
    description: 'DynamoDB Customers Table'
    config:
      tableName: { Ref: customersTable } 
      iamRoleStatements: 
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMERS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CUSTOMERS_TABLE}/index/*"
  - type: AMAZON_DYNAMODB
    name: DynamoReservationsTableDS
    description: 'DynamoDB Reservations Table'
    config:
      tableName: { Ref: reservationsTable } 
      iamRoleStatements: 
        - Effect: "Allow"
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RESERVATIONS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.RESERVATIONS_TABLE}/index/*"

  - type: AWS_LAMBDA
    name: UpdateCompanyLambda
    description: 'Update Company Lambda DataSource'
    config:
      functionName: updateCompany
      serviceRoleArn: "redacted" 

  - type: AWS_LAMBDA
    name: AddEmployeeLambda
    description: 'Add Employee Lambda DataSource'
    config:
      functionName: addEmployee
      serviceRoleArn: "redacted" 

  
substitutions: # allows to pass variables from here to velocity templates
  # ${stage} will be replaced with given value in all mapping templates
  stage: "${self:provider.stage}"

mappingTemplates:

  - dataSource: UpdateCompanyLambda
    type: Mutation 
    field: updateCompany
    request: Lambda.elevated_add.request.vtl
    response: Lambda.add.response.vtl

  - dataSource: DynamoBranchesTableDS
    type: Mutation 
    field: addBranch
    request: Common.elevated_add.request.vtl
    response: Common.add.response.vtl

  - dataSource: DynamoCarsTableDS
    type: Mutation 
    field: addCar
    request: Common.add.request.vtl
    response: Common.add.response.vtl

  - dataSource: DynamoCustomersTableDS
    type: Mutation 
    field: addCustomer
    request: Common.add.request.vtl
    response: Common.add.response.vtl

  - dataSource: AddEmployeeLambda
    type: Mutation 
    field: addEmployee
    response: Common.add.response.vtl

  - dataSource: DynamoReservationsTableDS
    type: Mutation 
    field: addReservation
    request: Common.add.request.vtl
    response: Common.add.response.vtl

  - dataSource: DynamoCarsTableDS
    type: Mutation 
    field: deleteCar
    request: Common.delete.request.vtl
    response: Common.add.response.vtl

  - dataSource: DynamoCustomersTableDS
    type: Mutation 
    field: deleteCustomer
    request: Common.delete.request.vtl
    response: Common.add.response.vtl

  - dataSource: DynamoReservationsTableDS
    type: Mutation 
    field: deleteReservation
    request: Common.delete.request.vtl
    response: Common.add.response.vtl

  - dataSource: DynamoCompaniesTableDS
    type: Query 
    field: getCompany
    request: Common.get.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoBranchesTableDS
    type: Query 
    field: getBranch
    request: Common.get.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoCarsTableDS
    type: Query 
    field: getCar
    request: Common.get.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoCustomersTableDS
    type: Query 
    field: getCustomer
    request: Common.get.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoEmployeesTableDS
    type: Query 
    field: getEmployee
    request: Common.get.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoReservationsTableDS
    type: Query 
    field: getReservation
    request: Common.get.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoBranchesTableDS
    type: Query 
    field: logger
    request: Common.log.request.vtl
    response: Common.log.response.vtl

  - dataSource: DynamoBranchesTableDS
    type: Company 
    field: branches
    request: Common.query.request.vtl
    response: Common.query.response.vtl

  - dataSource: DynamoCarsTableDS
    type: Company 
    field: cars
    request: Common.query.request.vtl
    response: Common.query.response.vtl

  - dataSource: DynamoCustomersTableDS
    type: Company 
    field: customers
    request: Common.query.request.vtl
    response: Common.query.response.vtl

  - dataSource: DynamoEmployeesTableDS
    type: Company 
    field: employees
    request: Common.query.request.vtl
    response: Common.query.response.vtl

  - dataSource: DynamoReservationsTableDS
    type: Company 
    field: reservations
    request: Common.query.request.vtl
    response: Common.query.response.vtl

  - dataSource: NoneDS
    type: Company
    field: statistics

  - dataSource: RocksetDS
    type: Statistics 
    field: active_reservations
    response: Common.rockset_count.response.vtl

  - dataSource: RocksetDS
    type: Statistics 
    field: revenue_by_model
    response: Common.rockset.response.vtl

  - dataSource: DynamoCompaniesTableDS
    type: Branch 
    field: company_info
    request: CompanyInfo.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoCompaniesTableDS
    type: Car 
    field: company_info
    request: CompanyInfo.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoBranchesTableDS
    type: Car 
    field: branch_info
    request: BranchInfo.request.vtl
    response: Common.get.response.vtl

  - dataSource: RocksetDS
    type: Car 
    field: currently_available
    response: Common.rockset_count.response.vtl

  - dataSource: RocksetDS
    type: Car 
    field: reservations
    response: Common.rockset.response.vtl

  - dataSource: DynamoCompaniesTableDS
    type: Reservation 
    field: company_info
    request: CompanyInfo.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoBranchesTableDS
    type: Reservation 
    field: branch_info
    request: BranchInfo.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoCarsTableDS
    type: Reservation 
    field: car_info
    request: CarInfo.request.vtl
    response: Common.get.response.vtl

  - dataSource: DynamoCustomersTableDS
    type: Reservation 
    field: customer_info
    request: CustomerInfo.request.vtl
    response: Common.get.response.vtl

